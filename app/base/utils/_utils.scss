/// Return character from `$string` at `$index`.
/// @since 1.2.0
/// @param {String} $string - string to check
/// @param {String} $index  - index to inspect
/// @return {String}
@function _ss-char-at($string, $index) {
  @return str-slice($string, $index, $index);
}

/// Calculating Levenshtein distance between strings `$a` and `$b`.
/// @since 1.2.0
/// @param {String} $a - first string
/// @param {String} $b - second string
/// @return {Number}
@function _ss-levenshtein($a, $b) {
  $a: to-lower-case($a);
  $b: to-lower-case($b);

  $n: str-length($a);
  $m: str-length($b);

  $matrix: _ss-matrix($n + 1, $m + 1);
  $cost: _ss-matrix($n, $m);

  @if $a == $b { @return 0; }
  @if $n == 0  { @return $m; }
  @if $m == 0  { @return $n; }

  @for $i from 0 through $n  {
    @for $j from 0 through $m  {
      $v: if($i == 0, $j, if($j == 0, $i, 0));
      @if $v != 0 {
        $matrix: _ss-set-matrix($matrix, $i + 1, $j + 1, $v);
      }
      @if $i != 0 and $j != 0 {
        $v: if(str-slice($a, $i, $i) == str-slice($b, $j, $j), 0, 1);
        @if $v != 0 {
          $cost: _ss-set-matrix($cost, $i, $j, $v);
        }
      }
    }
  }

  @for $i from 2 through length($matrix) {
    @for $j from 2 through length(nth($matrix, $i)) {
      $matrix: _ss-set-matrix($matrix, $i, $j, min(_ss-e($matrix, $i - 1, $j) + 1, _ss-e($matrix, $i, $j - 1) + 1, _ss-e($matrix, $i - 1, $j - 1) + _ss-e($cost, $i - 1, $j - 1)));
    }
  }

  @return _ss-e($matrix, length($matrix), length(nth($matrix, 1)));
}

/// Helper to target an element in a matrix
/// @access private
/// @param {Number} $m - matrix
/// @param {Number} $x - x coord
/// @param {Number} $y - y coord
/// @return {Number}
@function _ss-e($m, $x, $y) {
  @return nth(nth($m, $x), $y);
}

/// Helper instanciation a matrix of $x by $y
/// @access private
/// @param {Number} $x - number of cols
/// @param {Number} $y - number of lines
/// @return {List}
@function _ss-matrix($x, $y) {
  $matrix: ();

  @for $i from 1 through $x {
    $tmp: ();

    @for $y from 1 through $y {
      $tmp: append($tmp, 0)
    }

    $matrix: append($matrix, $tmp);
  }

  @return $matrix;
}

/// Helper assigning $value at $matrix[$x, $y]
/// @access private
/// @param {Number} $matrix - matrix to update
/// @param {Number} $x      - x coord
/// @param {Number} $y      - y coord
/// @param {Number} $value  - value to assign at $matrix[$x, $y]
/// @return {List}
@function _ss-set-matrix($matrix, $x, $y, $value) {
    @return set-nth($matrix, $x, set-nth(nth($matrix, $x), $y, $value));
}

/// Count the number of occurrences of `$needle` in `$string`.
/// @since 1.2.0
/// @param {String} $string - string
/// @param {String} $needle - substring to count in `$string`
/// @return {Number}
@function _ss-str-count($string, $needle) {
  $index: str-index($string, $needle);
  $result: if($index, 1, 0);

  @if $index {
    @for $i from $index + str-length($needle) through str-length($string) {
      @if str-slice($string, $i, $i + str-length($needle) - 1) == $needle {
        $result: $result + 1;
      }
    }
  }

  @return $result;
}

/// Check whether `$string` ends with `$needle`.
/// @since 1.2.0
/// @param {String} $string - string to check
/// @param {String} $needle - substring to check
/// @return {Bool}
@function _ss-str-ends-with($string, $needle) {
  @return str-slice($string, -1 * str-length($needle)) == $needle;
}

/// Split `$string` into several parts using `$delimiter`.
/// @since 1.2.0
/// @param {String} $string    - string to split
/// @param {String} $delimiter ('') - string to use as a delimiter to split `$string`
/// @return {List}
@function _ss-str-explode($string, $delimiter: "") {
  $result: ();
  $length: str-length($string);

  @if str-length($delimiter) == 0 {
    @for $i from 1 through $length {
      $result: append($result, str-slice($string, $i, $i));
    }

    @return $result;
  }

  $running: true;
  $remaining: $string;

  @while $running {
    $index: str-index($remaining, $delimiter);

    @if $index {
      $slice: str-slice($remaining, 1, $index - 1);
      $result: append($result, $slice);
      $remaining: str-slice($remaining, $index + str-length($delimiter));
    } @else {
      $running: false;
    }
  }

  @return append($result, $remaining);
}

/// Implode `$list` into a string.
/// @since 1.2.0
/// @param {List} $list - list to convert to string
/// @return {String}
@function _ss-str-implode($list) {
  $result: "";

  @each $item in $list {
    $result: $result + if(length($item) > 1, str-implode($item), $item);
  }

  @return $result;
}

/// Return last index of `$needle` in `$string`.
/// @since 1.2.0
/// @param {String} $string - string to search in
/// @param {String} $needle - substring to search for
/// @return {Number}
@function _ss-str-last-index($string, $needle) {
  $index: str-index($string, $needle);
  $result: $index;

  @if $index {
    @for $i from $index + str-length($needle) through str-length($string) {
      @if str-slice($string, $i, $i + str-length($needle) - 1) == $needle {
        $result: $i;
      }
    }
  }

  @return $result;
}

/// Lower case first character of `$string`.
/// @since 1.2.0
/// @param {String} $string - string to lower the first character
/// @return {String}
@function _ss-str-lcfirst($string) {
  @return to-lower-case(str-slice($string, 1, 1)) + str-slice($string, 2);
}

/// Pad `$string` from `$direction` with `$pad` to reach `$length` characters.
/// @since 1.2.0
/// @param {String} $string           - string to pad
/// @param {Number} $length           - number of characters to go for in returned string
/// @param {String} $pad       (" ")  - string to use to pad `$string`
/// @param {String} $direction (left) - direction left or right for padding
/// @return {String}
@function _ss-str-pad($string, $length, $pad: " ", $direction: left) {
  $new-string: $string;
  $index: 1;

  @if $length > str-length($string) {
    @while str-length($new-string) < $length {
      $remains: $length - str-length($new-string);
      $pad: if($remains < str-length($pad), str-slice($pad, 1, $remains), $pad);

      @if $direction == left {
        $new-string: str-insert($new-string, $pad, $index);
        $index: $index + str-length($pad);
      } @else {
        $new-string: $new-string + $pad;
      }
    }
  }

  @return $new-string;
}

/// Replace occurrences of `%s` in `$string` by `$elements`.
/// @since 1.2.0
/// @param {String}  $string   - string to check
/// @param {Arglist} $elements - strings to use for replacements in `%s`
/// @return {String}
@function _ss-str-printf($string, $elements...) {
  $breaker: "%s";
  $result: $string;

  @each $element in $elements {
    $index: str-index($result, $breaker);
    @if $index {
      $result: str-slice($result, 1, $index - 1) + _ss-stringify($element) + str-slice($result, $index + str-length($breaker));
    } @else {
      @return $result;
    }
  }

  @return $result;
}

/// Repeat `$string` `$times` times.
/// @since 1.2.0
/// @param {String} $string - string to repeat
/// @param {Number} $times  - number of times to repeat $string
/// @return {String}
@function _ss-str-repeat($string, $times) {
  $result: "";

  @for $i from 1 through $times {
    $result: $result + $string;
  }

  @return $result;
}

/// Replace `$search` with `$replace` in `$string`.
/// @since 1.2.0
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ("") - New value
/// @return {String} - Updated string
@function _ss-str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + _ss-str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

/// Reverse `$string`.
/// @since 1.2.0
/// @param {String} $string - string to reverse
/// @return {String}
@function _ss-str-reverse($string) {
  $result: "";

  @for $i from str-length($string) through 1 {
    $result: $result + str-slice($string, $i, $i);
  }

  @return $result;
}

/// Rotate all characters from the alphabet in `$string` by `$rot` positions.
/// @since 1.2.0
/// @param {String} $string   - string to rotate
/// @param {Number} $rot (13) - number of positions to switch in alphabet
/// @return {String}
@function _ss-str-rot($string, $rot: 13) {
  $alphabet: a b c d e f g h i j k l m n o p q r s t u v w x y z;
  $result: "";

  @for $i from 1 through str-length($string) {
    $char: str-slice($string, $i, $i);
    $index: index($alphabet, to-lower-case($char));
    $is-caps: $index and (index($alphabet, to-lower-case($char)) != index($alphabet, $char));
    $new-char: if($index,
      if($index + $rot > length($alphabet),
        nth($alphabet, $index + $rot - length($alphabet)),
        nth($alphabet, $index + $rot)
      ),
      $char
    );

    @if $is-caps {
      $new-char: to-upper-case($new-char);
    }

    $result: $result + $new-char;
  }

  @return $result;
}

/// Shuffle characters from `$string`.
/// @since 1.2.0
/// @param {String} $string - string to shuffle
/// @return {String}
@function _ss-str-shuffle($string) {
  @return str-implode(_ss-shuffle(str-explode($string)));
}

/// Shuffle a list
/// @access private
/// @param {List} $list - shuffle a list
/// @return {List}
@function _ss-shuffle($list) {
  @for $i from length($list) through 1 {
    $j: random(length($list) - 1) + 1;
    $tmp: nth($list, $i);
    $list: set-nth($list, $i, nth($list, $j));
    $list: set-nth($list, $j, $tmp);
  }

  @return $list;
}

/// Check whether `$string` stars with `$needle`.
/// @since 1.2.0
/// @param {String} $string - string to check
/// @param {String} $needle - substring to check
/// @return {Bool}
@function _ss-str-starts-with($string, $needle) {
  @return str-slice($string, 1, str-length($needle)) == $needle;
}

/// Remove all trailing and leading whitespaces from `$string`.
/// @since 1.2.0
/// @param {String} $string - string
/// @return {String}
@function _ss-str-trim($string) {
  $start: 1;
  $end: str-length($string);

  @for $i from 1 through str-length($string) {
    $first: str-slice($string, $i, $i);
    $last: str-slice($string, -$i, -$i);

    @if $first == " " and $i + 1 == $start + 1 {
      $start: $i + 1;
    }

    @if $last == " " and str-length($string) - $i == $end - 1 {
      $end: str-length($string) - $i;
    }
  }

  @return str-slice($string, $start, $end);
}

/// Capitalize first letter from `$string`.
/// @since 1.2.0
/// @param {String} $string - string for capitalization
/// @return {String}
@function _ss-str-ucfirst($string) {
  @return to-upper-case(str-slice($string, 1, 1)) + str-slice($string, 2);
}

/// Count number of words in `$string`.
/// @since 1.2.0
/// @param {String} $string - string to check
/// @return {String}
@function _ss-str-word-count($string) {
    @if $string == "" {
        @return 0;
    }

    $string: str-trim($string);
    $words: ();
    $i: str-length($string);

    @while $i > 0 {
        @if str-slice($string, $i, $i) == " " {
            $words: append($words, str-slice($string, $i + 1));
            $string: str-slice($string, 1, $i - 1);
        }
        $i: $i - 1;
    }

    @return length(append($words, $string));
}

/// Cast `$literal` to string.
/// @since 1.2.0
/// @param {*} $literal - number to cast to string
/// @return {String}
@function _ss-stringify($literal) {
  $result: "";

  @if length($literal) == 1 {
    $result: $literal + unquote("");
  } @else {
    @each $item in $literal {
      $result: $result + stringify($item);
    }
  }

  @return quote($result);
}

@function char-at($string, $index) {
  @if type-of($string) != "string" {
    @error "`char-at` function expecting a string for $string; #{type-of($string)} given.";
  }

  @if type-of($index) != "number" {
    @error "`char-at` function expecting a number for $index; #{type-of($index)} given.";
  }

  @if $index < 1 or $index > str-length($string) {
    @error "Out of bounds $index for `char-at`.";
  }

  @return _ss-char-at($string, $index);
}

@function levenshtein($a, $b) {
  @if type-of($a) != "string" {
    @error "`str-count` function expecting a string for $a; #{type-of($a)} given.";
  }

  @if type-of($b) != "string" {
    @error "`str-count` function expecting a string for $b; #{type-of($b)} given.";
  }

  @return _ss-levenshtein($a, $b);
}

@function str-count($string, $needle) {
  @if type-of($string) != "string" {
    @error "`str-count` function expecting a string for $string; #{type-of($string)} given.";
  }

  @if type-of($needle) != "string" {
    @error "`str-count` function expecting a string for $needle; #{type-of($needle)} given.";
  }

  @return _ss-str-count($string, $needle);
}

@function str-ends-with($string, $needle) {
  @if type-of($string) != "string" {
    @error "`str-starts-with` function expecting a string for $string; #{type-of($string)} given.";
  }

  @if type-of($needle) != "string" {
    @error "`str-starts-with` function expecting a string for $needle; #{type-of($needle)} given.";
  }

  @return _ss-str-ends-with($string, $needle);
}

@function str-explode($string, $delimiter: '') {
  @if type-of($string) != "string" {
    @error "`explode` function expecting a string; #{type-of($string)} given.";
  }

  @if type-of($delimiter) != "string" {
    @error "`explode` function expecting a string; #{type-of($delimiter)} given.";
  }

  @return _ss-str-explode($string, $delimiter);
}

@function str-implode($list) {
  @if type-of($list) != "list" {
    @error '$list for str-implode must be a list';
  }

  @return _ss-str-implode($list);
}

@function str-last-index($string, $needle) {
  @if type-of($string) != "string" {
    @error "`str-last-index` function expecting a string for $string; #{type-of($string)} given.";
  }

  @if type-of($needle) != "string" {
    @error "`str-last-index` function expecting a string for $needle; #{type-of($needle)} given.";
  }

  @return _ss-str-last-index($string, $needle);
}

@function str-lcfirst($string) {
  @if type-of($string) != "string" {
    @error "`str-lcfirst` function expecting a string for $string; #{type-of($string)} given.";
  }

  @return _ss-str-lcfirst($string);
}

@function str-pad($string, $length, $pad: " ", $direction: left) {
  @if type-of($string) != "string" {
    @error "`str-pad` function expecting a string for $string; #{type-of($string)} given.";
  }

  @if type-of($pad) != "string" {
    @error "`str-pad` function expecting a string for $pad; #{type-of($pad)} given.";
  }

  @if type-of($length) != "number" {
    @error "`str-pad` function expecting a number for $length; #{type-of($length)} given.";
  }

  @if index(left right, $direction) == null {
    @error "`str-pad` function expecting either `left` or `right` for $direction: #{$direction} given.";
  }
  @return _ss-str-pad($string, $length, $pad, $direction);
}
@function str-printf($string, $elements...) {
  @if type-of($string) != "string" {
    @error "`str-printf` function expecting a string for $string; #{type-of($string)} given.";
  }

  @return _ss-str-printf($string, $elements...);
}

@function str-repeat($string, $times) {
  @if type-of($string) != "string" {
    @error "`str-repeat` function expecting a string for $string; #{type-of($string)} given.";
  }

  @if type-of($times) != "number" {
    @error "`str-repeat` function expecting a number for $times; #{type-of($times)} given.";
  }

  @return _ss-str-repeat($string, $times);
}

@function str-replace($string, $search, $replace: '') {
  @if type-of($string) != "string" {
    @error "`str-replace` function expecting a string for $string; #{type-of($string)} given.";
  }

  @if type-of($search) != "string" {
    @error "`str-replace` function expecting a string for $search; #{type-of($search)} given.";
  }

  @if type-of($replace) != "string" {
    @error "`str-replace` function expecting a string for $replace; #{type-of($replace)} given.";
  }

  @return _ss-str-replace($string, $search, $replace);
}


@function str-reverse($string) {
  @if type-of($string) != "string" {
    @error "`str-reverse` function expecting a string for $string; #{type-of($string)} given.";
  }

  @return _ss-str-reverse($string);
}

@function str-rot($string, $rot: 13) {
  @if type-of($string) != "string" {
    @error "`str-rot` function expecting a string for $string; #{type-of($string)} given.";
  }

  @if type-of($rot) != "number" {
    @error "`str-rot` function expecting a number for $rot; #{type-of($rot)} given.";
  }

  @return _ss-str-rot($string, $rot);
}

@function str-shuffle($string) {
  @if type-of($string) != string {
    @error '$string of str-shuffle must be a string';
  }

  @return _ss-str-shuffle($string);
}

@function str-starts-with($string, $needle) {
  @if type-of($string) != "string" {
    @error "`str-starts-with` function expecting a string for $string; #{type-of($string)} given.";
  }

  @if type-of($needle) != "string" {
    @error "`str-starts-with` function expecting a string for $needle; #{type-of($needle)} given.";
  }

  @return _ss-str-starts-with($string, $needle);
}

@function str-trim($string) {
  @if type-of($string) != "string" {
    @error "`str-trim` function expecting a string for $string; #{type-of($string)} given.";
  }

  @return _ss-str-trim($string);
}

@function str-ucfirst($string) {
  @if type-of($string) != "string" {
    @error "`str-ucfirst` function expecting a string for $string; #{type-of($string)} given.";
  }

  @return _ss-str-ucfirst($string);
}

@function str-word-count($string) {
  @if type-of($string) != "string" {
    @error "`str-word-count` function expecting a string for $string; #{type-of($string)} given.";
  }

  @return _ss-str-word-count($string);
}

@function stringify($literal) {
  @return _ss-stringify($literal);
}

@function first($list) {
  @return nth($list, 1);
}

@function last($list) {
  @return nth($list, length($list));
}
{"version":3,"sources":["core.ts","settings.ts"],"names":["LolitaFramework","Block","blockSelector","this","block","jQuery","length","console","warn","MediaBreakpoints","_super","_this","call","window","on","onResize","__extends","prototype","mediaBreakpoints","sort","a","b","upValue","currentDeviceType","currentWidth","width","_i","_a","breakpoint","onBreakpointChange","undefined","info","name","addMediaBreakpoin","RangeError","push"],"mappings":"yMAEUA,iBAAV,SAAUA,GAUT,GAAAC,GAAA,WAgBC,QAAAA,GAAYC,GACXC,KAAKD,cAAgBA,EACrBC,KAAKC,MAAQC,OAAOH,GAEfC,KAAKC,MAAME,QACfC,QAAQC,KAAK,yCAA2CL,KAAKD,eAGhE,MAAAD,KAxBsBD,GAAAC,MAAKA,CA6B3B,IAAAQ,GAAA,SAAAC,GAiBC,QAAAD,GAAYP,GAjBb,GAAAS,GAAAR,IAkBEO,GAAAE,KAAAT,KAAMD,GACNG,OAAOQ,QAAQC,GAAG,SACjB,WACCH,EAAKI,aAGPZ,KAAKY,WAyDP,MAjF+CC,WAAAP,EAAAC,GAmCpCD,EAAAQ,UAAAF,SAAV,WACCN,EAAiBS,iBAAmBT,EAAiBS,iBAAiBC,KAAK,SAACC,EAAGC,GAC9E,MAAIA,GAAEC,QAAUF,EAAEE,QACV,EACGD,EAAEC,QAAUF,EAAEE,SACjB,EAEA,GAOT,KAAuB,GAFnBC,GADAC,EAA+BnB,OAAOQ,QAAQY,QAG3BC,EAAA,EAAAC,EAAAlB,EAAiBS,iBAAjBQ,EAAAC,EAAArB,OAAAoB,IAAkC,CAApD,GAAIE,GAAUD,EAAAD,EAClB,MAAIF,GAAgBI,EAAWN,SAG9B,KAFAC,GAAoBK,EAMlBL,GAAqBd,EAAiBc,oBACzCd,EAAiBc,kBAAoBA,EACrCpB,KAAK0B,mBAAmBN,GACCO,QAArBP,EACHhB,QAAQC,KAAK,oCAEbD,QAAQwB,KAAK,2BAA6BtB,EAAiBc,kBAAkBS,QASlEvB,EAAAwB,kBAAd,SAAgCL,GAC/B,IAAKA,EAAWI,KACf,KAAM,IAAIE,YAAW,uCAEtB,IAAIN,EAAWN,QAAU,EACxB,KAAM,IAAIY,YAAW,wCAEtBzB,GAAiBS,iBAAiBiB,KAAKP,IAzEvBnB,EAAAS,oBA2ElBT,GAjF+CR,EAAzBD,GAAAS,iBAAgBA,GAvC7BT,kBAAAA;ACCV,GAAUA,kBAAV,SAAUA,GAETA,EAAgBS,iBAAiBwB,mBAAoBD,KAAM,QAASV,QAAS,OAC7EtB,EAAgBS,iBAAiBwB,mBAAoBD,KAAM,OAAQV,QAAS,OAC5EtB,EAAgBS,iBAAiBwB,mBAAoBD,KAAM,QAASV,QAAS,OAC7EtB,EAAgBS,iBAAiBwB,mBAAoBD,KAAM,UAAWV,QAAS,MAC/EtB,EAAgBS,iBAAiBwB,mBAAoBD,KAAM,SAAUV,QAAS,OANrEtB,kBAAAA","file":"general-ts.js","sourcesContent":["/// <reference path='../def/jquery.d.ts' />\n\nnamespace LolitaFramework {\n\n\t/**\n\t * Block general Class\n\t */\n\texport interface Breakpoint {\n\t\tname: string,\n\t\tupValue: number\n\t}\n\n\texport abstract class Block {\n\t\t/**\n\t\t * [Block object]\n\t\t * @type {JQuery}\n\t\t */\n\t\tprotected block: JQuery;\n\n\t\t/**\n\t\t * [Block selector]\n\t\t * @type {string}\n\t\t */\n\t\tprotected blockSelector: string;\n\n\t\t/**\n\t\t * [Constructor]\n\t\t */\n\t\tconstructor(blockSelector: string) {\n\t\t\tthis.blockSelector = blockSelector;\n\t\t\tthis.block = jQuery(blockSelector);\n\n\t\t\tif (!this.block.length) {\n\t\t\t\tconsole.warn('There is no any blocks with selector: ' + this.blockSelector);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * \n\t */\n\texport abstract class MediaBreakpoints extends Block {\n\n\t\t/**\n\t\t * [Array of device types]\n\t\t * @type {Array}\n\t\t */\n\t\tprotected static mediaBreakpoints: Array<Breakpoint> = [];\n\n\t\t/**\n\t\t * [Current device type]\n\t\t * @type {Breakpoint}\n\t\t */\n\t\tprotected static currentDeviceType: Breakpoint;\n\n\t\t/**\n\t\t * [Constructor]\n\t\t */\n\t\tconstructor(blockSelector: string) {\n\t\t\tsuper(blockSelector);\n\t\t\tjQuery(window).on('resize', \n\t\t\t\t() => {\n\t\t\t\t\tthis.onResize();\n\t\t\t\t}\n\t\t\t);\n\t\t\tthis.onResize();\n\t\t}\n\n\t\t/**\n\t\t * [On breakpoint changed]\n\t\t */\n\t\tprotected abstract onBreakpointChange(breakpoint: Breakpoint): void;\n\n\t\t/**\n\t\t * [On screen resize]\n\t\t */\n\t\tprotected onResize() {\n\t\t\tMediaBreakpoints.mediaBreakpoints = MediaBreakpoints.mediaBreakpoints.sort((a, b): number => {\n\t\t\t\tif (b.upValue > a.upValue) {\n\t\t\t\t\treturn 1;\n\t\t\t\t} else if (b.upValue < a.upValue) {\n\t\t\t\t\treturn -1;\n\t\t\t\t} else {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tlet currentWidth: number = <number>jQuery(window).width();\n\t\t\tlet currentDeviceType: Breakpoint;\n\n\t\t\tfor (let breakpoint of MediaBreakpoints.mediaBreakpoints) {\n\t\t\t\tif (currentWidth <= breakpoint.upValue) {\n\t\t\t\t\tcurrentDeviceType = breakpoint;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (currentDeviceType != MediaBreakpoints.currentDeviceType) {\n\t\t\t\tMediaBreakpoints.currentDeviceType = currentDeviceType;\n\t\t\t\tthis.onBreakpointChange(currentDeviceType);\n\t\t\t\tif (currentDeviceType == undefined) {\n\t\t\t\t\tconsole.warn('Current device type is undefined');\n\t\t\t\t} else {\n\t\t\t\t\tconsole.info('Current device type is: ' + MediaBreakpoints.currentDeviceType.name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * [Added breakpoint to mediaBreakpoints value]\n\t\t * @param {Breakpoint} breakpoint [description]\n\t\t */\n\t\tpublic static addMediaBreakpoin(breakpoint: Breakpoint): void {\n\t\t\tif (!breakpoint.name) {\n\t\t\t\tthrow new RangeError('Breakpoint label should be not empty');\t\t\t\t\n\t\t\t}\n\t\t\tif (breakpoint.upValue < 1) {\n\t\t\t\tthrow new RangeError('Breakpoint upValue should be positive');\n\t\t\t}\n\t\t\tMediaBreakpoints.mediaBreakpoints.push(breakpoint);\n\t\t}\n\t}\n}\n","/// <reference path=\"./core.ts\" />\n// Options\n\nnamespace LolitaFramework {\n\t// media breakpoints\n\tLolitaFramework.MediaBreakpoints.addMediaBreakpoin({ name: 'extra', upValue: 9999});\n\tLolitaFramework.MediaBreakpoints.addMediaBreakpoin({ name: 'wide', upValue: 1200});\n\tLolitaFramework.MediaBreakpoints.addMediaBreakpoin({ name: 'small', upValue: 1024});\n\tLolitaFramework.MediaBreakpoints.addMediaBreakpoin({ name: 'tablets', upValue: 768});\n\tLolitaFramework.MediaBreakpoints.addMediaBreakpoin({ name: 'phones', upValue: 420});\n}\n"],"sourceRoot":"/source/"}